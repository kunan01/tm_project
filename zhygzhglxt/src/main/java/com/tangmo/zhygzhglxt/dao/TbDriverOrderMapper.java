package com.tangmo.zhygzhglxt.dao;

import com.tangmo.zhygzhglxt.entity.TbDriverOrder;
import com.tangmo.zhygzhglxt.entity.TbPassengerOrder;
import com.tangmo.zhygzhglxt.utility.Result;
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 * 车主DAO
 */
public interface TbDriverOrderMapper {

    /**
     * This method was generated by MyBatis Generator.
     */
    int deleteByPrimaryKey(String driverOrderId);

    /**
     * This method was generated by MyBatis Generator.
     */
    int insert(TbDriverOrder record);

    /**
     * This method was generated by MyBatis Generator.
     */
    int insertSelective(TbDriverOrder record);

    /**
     * 根据司机用户的唯一标识查询未完成的订单是否存在
     */
    List<TbDriverOrder> selectByDriverCodeAndState(@Param("driverCode") String driverCode);

    /**
     * 根据司机用户查找接的乘客订单的唯一标识数组
     */
    List<String> selPassengerOrderCodeByDriverCode(@Param("driverCode") String driverCode);

    /**
     * This method was generated by MyBatis Generator.
     */
    TbDriverOrder selectByPrimaryKey(String driverOrderId);

    /**
     * 根据乘客订单的唯一标识查询司机订单的信息
     */
    TbDriverOrder selByPassengerOrderCode(@Param("passengerOrderCode") String passengerOrderCode);

    /**
     * 乘客评价司机订单
     */
    int ratingByOrderCode(@Param("passengerOrderCode") String passengerOrderCode, @Param("opinion") String opinion, @Param("rating") String rating);


    /**
     * 根据车主订单的唯一标识，查找订单
     */
    TbDriverOrder selectByCode(@Param("driverOrderCode") String driverOrderCode);

    /**
     * This method was generated by MyBatis Generator.
     */
    int updateByPrimaryKeySelective(TbDriverOrder record);

    /**
     * 根据车主订单的唯一标识改变订单的状态
     */
    int updateDriverOrderState(@Param("state") String state, @Param("code") String code);

    /**
     * 根据乘客订单的唯一标识改变订单的状态
     */
    int updateStateByPassengerOrderCode(@Param("state") String state, @Param("passengerOrderCode") String passengerOrderCode);

    /**
     * This method was generated by MyBatis Generator.
     */
    int updateByPrimaryKey(TbDriverOrder record);

    /**
     * 车主查询乘客所有单子（预约单 实时单）
     *
     * @param endAbout 0预约单 1实时单
     * @return
     */
    List<TbPassengerOrder> jtQuery(@Param("endAbout") String endAbout, @Param("orderState") String orderState, @Param("tbParmId") String tbParmId);

    /**
     * 班车车主查询乘客所有单子（预约单 实时单）
     *
     * @param endAbout   0预约单 1实时单
     * @param orderState 订单的状态
     * @param tbParmId   0预约单 1实时单
     * @param carNumber  车牌号
     * @return
     */
    List<TbPassengerOrder> selPassengerOrderByBusRoute(@Param("endAbout") String endAbout, @Param("orderState") String orderState, @Param("tbParmId") String tbParmId, @Param("carNumber") String carNumber);


    /**
     * 车主查询单子详情
     *
     * @param driverOrderCode 司机订单唯一标识
     * @return
     */
    TbDriverOrder jtQueryOrderCode(String driverOrderCode);

    /**
     * 车主查询自己所有单子状态
     *
     * @param driverId         车主id
     * @param driverOrderState 订单状态（0 未完成  1完成  2 取消）
     * @return
     */
    List<TbDriverOrder> jtQyeryById(@Param("driverId") String driverId, @Param("driverOrderState") String driverOrderState);


}