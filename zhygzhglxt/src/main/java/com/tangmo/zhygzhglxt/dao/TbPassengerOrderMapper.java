package com.tangmo.zhygzhglxt.dao;

import com.tangmo.zhygzhglxt.entity.TbPassengerOrder;
import com.tangmo.zhygzhglxt.entity.dto.OrderDto;
import org.apache.ibatis.annotations.Param;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

public interface TbPassengerOrderMapper {

    /**
     * This method was generated by MyBatis Generator.
     */
    int deleteByPrimaryKey(String orderId);

    /**
     * This method was generated by MyBatis Generator.
     */
    int insertSelective(TbPassengerOrder record);

    /**
     * 改变订单的支付方式和订单的价格
     */
    int updatePayWayPriceByPassengerOrderCode(@Param("passengerOrderCode") String passengerOrderCode, @Param("price") BigDecimal price);

    /**
     * 改变订单中最后的经度纬度
     */
    int updateLastLaLoByPassengerOrderCode(@Param("passengerOrderCode") String passengerOrderCode, @Param("la") String la, @Param("lo") String lo);

    /**
     * 统计用户的总订单数
     */
    int totalUserOrder(@Param("userCode") String userCode);

    //根据状态不同统计用户的订单数
    int totalUserOrderByState(@Param("userCode") String userCode, @Param("orderState") String orderState);

    /**
     * This method was generated by MyBatis Generator.
     */
    TbPassengerOrder selectByPrimaryKey(String orderId);

    /**
     * 根据订单号查询订单
     */
    TbPassengerOrder selectByPassOrderNumber(@Param("orderNumber") String orderNumber);

    /**
     * This method was generated by MyBatis Generator.
     */
    int updateByPrimaryKeySelective(TbPassengerOrder record);

    /**
     * 根据乘客订单的唯一标识改变订单的状态
     */
    int updateStateByPassengerOrderCode(@Param("passengerOrderCode") String passengerOrderCode, @Param("state") String state);

    /**
     * 根据乘客订单的唯一标识改变订单的状态
     */
    int updateStatePayByPassengerOrderCode(@Param("passengerOrderCode") String passengerOrderCode, @Param("state") String state, @Param("payWay") String payWay);

    /*
     * 根据用户的唯一标识code模糊查找所有订单（可分页）
     */
    List<TbPassengerOrder> selPassOrderByUserCode(@Param("name") String name, @Param("state") String state, @Param("userCode") String userCode, @Param("endAbout") String endAbout);


    /*
     * 根据用户的唯一标识code和类型模糊查找用户当前的订单和已接单所有订单（可分页）
     */
    List<TbPassengerOrder> selPassOrderByUserCodeAndType(@Param("name") String name, @Param("userCode") String userCode, @Param("type") String type);


    /**
     * 用户修改订单状态
     *
     * @param orderCode  订单唯一标识
     * @param orderState 订单状态（0未接单 1已接单 2订单完成 3订单已取消）
     * @return
     */
    int jtUpdateById(@Param("orderCode") String orderCode, @Param("orderState") String orderState);

    /**
     * 后台查询所有订单
     *
     * @param name       模糊(开始地，结束地)
     * @param orderState 订单状态（0未接单 1已接单 2订单完成 3订单已取消）
     * @param endAbout   是否是预约单  0是预约订单  1实时订单
     * @return
     */
    List<TbPassengerOrder> jtQueryByList(@Param("name") String name, @Param("orderState") String orderState, @Param("endAbout") String endAbout, @Param("startTime") String startTime, @Param("endTime") String endTime);

    /**
     * 订单统计：根据开始时间和结束时间且订单类型查询每日的通乡客运的订单统计量(列表)
     *
     * @param name       模糊(开始地，结束地)
     * @param startDate  开始时间
     * @param endDate    结束时间
     * @param orderState 订单状态（0未接单 1已接单 2订单完成 3订单已取消）
     * @return
     */
    List<TbPassengerOrder> selOrderByCountry(@Param("name") String name, @Param("startDate") String startDate, @Param("endDate") String endDate, @Param("orderState") String orderState);

    /**
     * 订单统计：根据开始时间和结束时间且订单类型查询每日的通乡客运的订单统计量(列表)
     *
     * @param name       模糊(开始地，结束地)
     * @param startDate  开始时间
     * @param endDate    结束时间
     * @param orderState 订单状态（0未接单 1已接单 2订单完成 3订单已取消）
     * @return
     */
    List<TbPassengerOrder> selOrderByCountry2(@Param("name") String name, @Param("startDate") String startDate, @Param("endDate") String endDate, @Param("orderState") String orderState, @Param("passegerCodes") List<String> passegerCodes);


    /**
     * 查询该用户是否有正在进行的订单
     *
     * @param userCode 用户的唯一标识
     */
    List<TbPassengerOrder> selOrderStateByUserCode(@Param("userCode") String userCode);

    /**
     * 根据用户订单的的唯一标识code查找订单详情
     */
    TbPassengerOrder selOrderDetailByOrderCode(@Param("passengerOrderCode") String passengerOrderCode);

    /**
     * 查询指定订单详情
     *
     * @param orderCode
     * @return
     */
    TbPassengerOrder jtQueryByListByCode(@Param("orderCode") String orderCode);


    /**
     * 根据条件查询订单
     *
     * @param orderDto
     * @return
     */
    List<TbPassengerOrder> selOrderByCondition(OrderDto orderDto);

    /**
     * 删除指定订单（假删）
     *
     * @param orderCode 订单唯一标识
     * @return
     */
    int jtDelete(@Param("orderCode") String orderCode);

    /**
     * 订单统计：后台根据年月查询订单的完成量和取消量
     */
    Map selOrderByDate(@Param("timeDate") String timeDate);

    /**
     * 订单统计：后台根据年月查询订单 实时单完成单量 预约单完成单量 取消的实时单量 取消的预约单单量
     */
    Map selOrderCountByDate(@Param("timeDate") String timeDate);

    /**
     * 订单统计：后台根据年月查询订单 这个月内每天的用户的单量的统计和完成单量
     */
    List<Map> selOrderCountListByDate(@Param("startDate") String startDate, @Param("endDate") String endDate);

    /**
     * 订单统计：根据开始时间和结束时间查询每日的订单统计量
     */
    List<Map> selOrderByStartDateEndDate(@Param("startDate") String startDate, @Param("endDate") String endDate);

}